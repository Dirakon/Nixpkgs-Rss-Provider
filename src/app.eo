# Comment is to be added.
[args] > app
  QQ.fs.path > state-path
    args.at 0
  seq > @
    *
      while
        true > [i] >>
        [i] >>
          seq > @
            *
              QQ.io.stdin.next-line > program-name
              QQ.io.stdin.next-line > branch
              external.log
                "Reading"
              currently-saved-data > data
                branch
                program-name
              external.log
                "Getting current version"
              version > current-version
                branch
                program-name
              data.actualized > new-data
                current-version
              program-data-storage > storage
                state-path
              external.log
                "Writing..."
              storage.write
                new-data
  [branch program-name] > version
    seq > @
      *
        external.version > version-number
          branch
          program-name
        program-version
          version-number
          current-time
  [branch program-name] > currently-saved-data
    seq > @
      *
        program-data-storage > storage
          state-path
        storage.read > data
          branch
          program-name

  [] > current-time
    output. > @
      QQ.sys.posix
        "gettimeofday"
        * QQ.sys.posix.timeval

# Comment is to be added.
[state-path] > program-data-storage
  state-path > @
  [branch program-name] > data-file
    QQ.fs.file > file
      QQ.fs.path.joined
        *
          state-path
          QQ.fs.path
            branch
          QQ.fs.path
            program-name
    QQ.fs.dir > directory
      QQ.fs.file
        QQ.fs.path
          file.dirname
    seq > @
      *
        directory.made
        file
  [branch program-name] > read
    data-file > file
      branch
      program-name
    file.path > src
    seq > @
      *
        if.
          exists.
            QQ.fs.file
              src
          seq
            *
              size. > file-size!
                QQ.fs.file
                  src
              external.log
                "Will be reading"
              malloc.of > content
                2
                [m]
                  seq > @
                    *
                      open.
                        QQ.fs.file
                          src
                        "r"
                        [f] >>
                          ^.m.put > @
                            f.read 2
                      m
              external.log
                "Done reading"
              external.log
                content
              program-data
                branch
                program-name
                QQ.structs.list
                  tuple.empty
          seq
            *
              program-data
                branch
                program-name
                QQ.structs.list
                  tuple.empty
  [program-data-instance] > write
    data-file > file
      program-data-instance.branch
      program-data-instance.program-name
    seq > @
      *
        program-data-instance.versions.reduced > serialized-versions
          QQ.txt.text
            ""
          [accum version]
            chained. > @
              accum
              *
                QQ.txt.text
                  version.version-number
                QQ.txt.text
                  "|||"
                QQ.txt.text
                  QQ.txt.sprintf
                    "%d"
                    * version.timestamp.tv-sec
                QQ.txt.text
                  "\n"
        external.log
          serialized-versions
        external.log
          "Is about to write to file..."
        external.write
          file
          serialized-versions
        external.log
          "Actually written to file..."
        program-data-instance

# Comment is to be added.
[branch program-name versions] > program-data
  program-name > @
  [] > as-rss
    "TODO: format as rss xml" > @
  [new-version] > actualized
    program-data > @
      branch
      program-name
      if.
        and.
          eq.
            last-index-of.
              versions
              new-version
            versions.length.minus 1
          not.
            versions.is-empty
        versions
        versions.with new-version

# Comment is to be added.
[version-number timestamp] > program-version
  version-number > @

# Comment is to be added.
[] > external
  "" > @
  [content] > output-multiline
    QQ.txt.text > text-content
      content
    split. > lines
      text-content
      "\n"
    seq > @
      *
        QQ.io.stdout
          QQ.txt.sprintf
            "(lines: %d)\n"
            * lines.length
        QQ.io.stdout
          QQ.txt.sprintf
            "%s\n"
            * content
  [text] > log
    seq > @
      *
        QQ.io.stdout
          "Log:\n"
        output-multiline
          text
  [file content] > write
    QQ.txt.text > write-file
      "write-file"
    seq > @
      *
        send-command
          write-file.chained
            * command-separator file.as-path
        output-multiline content
  [command] > send-command
    QQ.io.stdout > @
      chained.
        QQ.txt.text
          "Request: "
        *
          QQ.txt.text
            command
          QQ.txt.text
            "\n"
  [] > get-response
    seq > @
      *
        QQ.io.stdout
          "Response: "
        QQ.io.stdin.next-line
  [branch program-name] > version
    QQ.txt.text > get-version
      "get-version"
    seq > @
      *
        send-command
          get-version.chained
            * command-separator branch command-separator program-name
        get-response > version-number
        version-number
  "|||" > command-separator
